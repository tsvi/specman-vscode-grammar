{
  "contexts": {
    "stray-brackets": [
      {
        "match": "\\)|\\]|\\}",
        "scope": "invalid.illegal.stray-bracket-end.specman"
      }
    ],
    "stray-brackets-code": [
      {
        "match": "\\(",
        "push": [
          {
            "meta_content_scope": "meta.class.body.specman"
          },
          {
            "match": "\\)",
            "pop": true
          },
          {
            "match": "[^\\)\\n]*$(?!\\n)",
            "scope": "invalid.illegal.unbalanced-bracket.specman"
          },
          {
            "include": "code"
          }
        ]
      },
      {
        "match": "\\[",
        "push": [
          {
            "meta_content_scope": "meta.class.body.specman"
          },
          {
            "match": "\\]",
            "pop": true
          },
          {
            "match": "[^\\]\\n]*$(?!\\n)",
            "scope": "invalid.illegal.unbalanced-bracket.specman"
          },
          {
            "include": "code"
          }
        ]
      },
      {
        "match": "\\{",
        "push": [
          {
            "meta_content_scope": "meta.class.body.specman"
          },
          {
            "match": "\\}",
            "pop": true
          },
          {
            "match": "[^\\}\\n]*$(?!\\n)",
            "scope": "invalid.illegal.unbalanced-bracket.specman"
          },
          {
            "include": "code"
          }
        ]
      },
      {
        "include": "stray-brackets"
      }
    ],
    "stray-brackets-actions": [
      {
        "match": "\\(",
        "push": [
          {
            "meta_content_scope": "meta.actions.specman"
          },
          {
            "match": "\\)",
            "pop": true
          },
          {
            "match": "[^\\)\\n]*$(?!\\n)",
            "scope": "invalid.illegal.unbalanced-bracket.specman"
          },
          {
            "include": "actions"
          }
        ]
      },
      {
        "match": "\\[",
        "push": [
          {
            "meta_content_scope": "meta.actions.specman"
          },
          {
            "match": "\\]",
            "pop": true
          },
          {
            "match": "[^\\]\\n]*$(?!\\n)",
            "scope": "invalid.illegal.unbalanced-bracket.specman"
          },
          {
            "include": "actions"
          }
        ]
      },
      {
        "match": "\\{",
        "push": [
          {
            "meta_content_scope": "meta.actions.specman"
          },
          {
            "match": "\\}",
            "pop": true
          },
          {
            "match": "[^\\}\\n]*$(?!\\n)",
            "scope": "invalid.illegal.unbalanced-bracket.specman"
          },
          {
            "include": "actions"
          }
        ]
      },
      {
        "include": "stray-brackets"
      }
    ],
    "string": [
      {
        "meta_scope": "string.quoted.double.specman"
      },
      {
        "meta_include_prototype": false
      },
      {
        "match": "\\\\n|\\\\t|\\\\f|\\\\\"|\\\\\\\\|\\\\r",
        "scope": "constant.character.escape.specman"
      },
      {
        "match": "\"",
        "scope": "punctuation.definition.string.end.specman",
        "pop": true
      }
    ],
    "type-casting": [
      {
        "match": "\\.(as_a)\\s*(\\()",
        "captures": {
          "1": "keyword.other.type-casting.specman",
          "2": "punctuation.section.parens.begin.specman"
        },
        "push": [
          {
            "meta_scope": "meta.type-casting.builtin.specman"
          },
          {
            "match": "(\\()",
            "scope": "punctuation.section.parens.begin.specman",
            "push": [
              {
                "match": "(\\))",
                "scope": "punctuation.section.parens.end.specman",
                "pop": true
              },
              {
                "include": "literals"
              },
              {
                "include": "operators"
              }
            ]
          },
          {
            "match": "(\\))",
            "pop": true,
            "captures": {
              "1": "punctuation.section.parens.end.specman"
            }
          },
          {
            "match": "(?:\\b{{valid_type_no_modifier}}\\b)",
            "scope": "storage.type.specman"
          },
          {
            "include": "literals"
          },
          {
            "include": "operators"
          }
        ]
      },
      {
        "match": "\\btype\\b",
        "scope": "keyword.other.constraint.specman"
      },
      {
        "match": "(\\bis\\s+(?:\\bnot\\b)?\\s*a)(?:\\s+({{valid_determinant}}))+",
        "captures": {
          "1": "keyword.other.type-casting.specman",
          "2": "storage.type.specman"
        }
      }
    ],
    "built-in-function-calls": [
      {
        "match": "\\s+({{built_in_functions_optional_parens}})\\b(?=\\s*(\\()?)",
        "scope": "support.function.builtin.specman",
        "push": [
          {
            "meta_scope": "meta.function-call.builtin.specman"
          },
          {
            "match": "(?=\\()",
            "pop": true
          },
          {
            "match": "\\s*([;,])",
            "pop": true,
            "scope": "punctuation.terminator.specman"
          },
          {
            "include": "actions"
          }
        ]
      },
      {
        "match": "({{built_in_functions}})\\s*(\\()",
        "captures": {
          "1": "support.function.builtin.specman",
          "2": "punctuation.section.parens.begin.specman"
        },
        "push": [
          {
            "meta_scope": "meta.function-call.builtin.specman"
          },
          {
            "include": "function-call-parameters"
          }
        ]
      },
      {
        "match": "\\.({{list_pseudo_methods}}|{{built_in_member_functions}}|{{set_pseudo_methods}}|{{any_struct_member_functions}}|{{any_unit_member_functions}})\\s*(\\()",
        "captures": {
          "1": "support.function.builtin.specman",
          "2": "punctuation.section.parens.begin.specman"
        },
        "push": [
          {
            "meta_scope": "meta.function-call.builtin.specman"
          },
          {
            "include": "function-call-parameters"
          }
        ]
      },
      {
        "match": "(\\bfor\\s+each\\b)\\s*(?:\\(\\s*{{valid_id}}\\s*\\)\\s*)?(?:\\busing\\s+index\\s*\\(\\s*{{valid_id}}\\s*\\)\\s*)?(in)\\s+(?:{{valid_name}})(?=\\s*\\{)",
        "captures": {
          "1": "keyword.control.specman",
          "2": "variable.other.specman",
          "3": "variable.other.specman",
          "4": "keyword.control.specman",
          "5": "variable.other.specman"
        }
      },
      {
        "match": "(\\bfor\\s+each\\b)\\s*(?:\\(\\s*{{valid_id}}\\s*\\)\\s*)?(?:\\busing\\s+index\\s*\\(\\s*{{valid_id}}\\s*\\)\\s*)?(in)\\s+",
        "captures": {
          "1": "keyword.control.specman",
          "2": "variable.other.specman",
          "3": "variable.other.specman",
          "4": "keyword.control.specman"
        }
      }
    ],
    "function-calls": [
      {
        "match": "(?=\\b{{valid_name}}\\b\\s*\\()",
        "push": "function-consume"
      }
    ],
    "function-consume": [
      {
        "meta_scope": "meta.function-call.specman"
      },
      {
        "match": "(?!\\bis\\sa\\b)",
        "pop": true
      },
      {
        "match": "(?=\\bis\\s+\\b)",
        "pop": true
      },
      {
        "match": "\\.({{list_pseudo_methods}}|{{built_in_member_functions}}|{{set_pseudo_methods}})\\s*(\\()",
        "captures": {
          "1": "support.function.builtin.specman",
          "2": "punctuation.section.parens.begin.specman"
        },
        "set": "function-call-parameters"
      },
      {
        "match": "\\b{{valid_id}}\\b\\s*(\\()",
        "captures": {
          "1": "variable.function.specman",
          "2": "punctuation.section.parens.begin.specman"
        },
        "set": "function-call-parameters"
      }
    ],
    "function-call-parameters": [
      {
        "match": "(,)",
        "scope": "punctuation.separator.specman"
      },
      {
        "match": "(\\))\\s*(?=;)?",
        "pop": true,
        "captures": {
          "1": "punctuation.section.parens.end.specman",
          "2": "punctuation.terminator.specman"
        }
      },
      {
        "include": "actions"
      }
    ],
    "methods": [
      {
        "match": "(?=^\\s*(?:{{struct_access}})?\\s*(static\\s+)?(final\\s+)?\\s*\\b{{valid_id}}\\b\\s*\\()",
        "push": "method-declaration"
      }
    ],
    "method-declaration": [
      {
        "match": "({{struct_access}})?\\s*(static\\s+)?(final\\s+)?\\s*\\b{{valid_id}}\\b\\s*(\\()",
        "captures": {
          "1": "storage.modifier.function.specman",
          "2": "storage.modifier.function.specman",
          "3": "storage.modifier.function.specman",
          "4": "meta.method.identifier.specman entity.name.function.specman",
          "5": "meta.method.parameters.specman punctuation.section.parens.begin.specman"
        },
        "set": "method-parameters"
      },
      {
        "match": "^((?!is).)*$",
        "pop": true
      }
    ],
    "method-parameters": [
      {
        "meta_content_scope": "meta.method.parameters.specman"
      },
      {
        "match": "(?:{{valid_id}}\\s*(:)\\s*(?:(\\*)?{{valid_type}}))",
        "captures": {
          "1": "variable.parameter.specman",
          "2": "punctuation.separator.parameter.specman",
          "3": "punctuation.accessor.parameter.specman",
          "4": "storage.type.specman"
        }
      },
      {
        "match": ",",
        "scope": "punctuation.separator.parameter.specman"
      },
      {
        "match": "\\)\\s*(;)",
        "scope": "punctuation.section.parens.end.specman",
        "captures": {
          "1": "punctuation.terminator.specman"
        },
        "pop": true
      },
      {
        "match": "\\)",
        "scope": "punctuation.section.parens.end.specman",
        "set": "method-declaration-end"
      },
      {
        "include": "literals"
      },
      {
        "include": "operators"
      }
    ],
    "method-declaration-end": [
      {
        "match": "(:)\\s*{{valid_type}}",
        "captures": {
          "1": "punctuation.separator.return-type.specman",
          "2": "meta.method.return-type.specman storage.type.specman"
        }
      },
      {
        "match": "(\\@){{valid_id}}",
        "captures": {
          "1": "punctuation.accessor.event.specman",
          "2": "keyword.control.function.event.specman"
        }
      },
      {
        "match": "(is)\\s+(empty|undefined|import.*)\\s*(;)",
        "captures": {
          "1": "keyword.other.function.specman",
          "2": "keyword.modifier.function.specman",
          "3": "punctuation.terminator.specman"
        },
        "pop": true
      },
      {
        "match": "(is)\\s+(only|first|also)?",
        "captures": {
          "1": "keyword.other.function.specman",
          "2": "keyword.modifier.function.specman"
        }
      },
      {
        "match": "\\{",
        "scope": "punctuation.section.method.begin.specman",
        "set": [
          {
            "meta_content_scope": "meta.actions.specman"
          },
          {
            "match": "(\\})\\s*(;)?",
            "captures": {
              "1": "punctuation.section.method.end.specman",
              "2": "punctuation.terminator.specman"
            },
            "pop": true
          },
          {
            "include": "actions"
          }
        ]
      }
    ],
    "when-inheritance": [
      {
        "match": "(?=^\\s*when(?:\\s+({{valid_determinant}}))+\\s*\\{)",
        "push": "struct-declaration"
      }
    ],
    "constraint-expression": [
      {
        "meta_scope": "meta.constraint-expression.specman"
      },
      {
        "match": "(=>\\s+)(all\\s+of\\b)?(?=\\s*\\{)",
        "captures": {
          "1": "keyword.operator.logical.specman",
          "2": "keyword.control.constraint.specman"
        },
        "pop": true
      },
      {
        "include": "priority-scopes"
      },
      {
        "include": "list-literals"
      },
      {
        "match": ";",
        "scope": "punctuation.terminator.specman",
        "pop": true
      }
    ],
    "list-literals": [
      {
        "match": "(\\{)",
        "captures": {
          "1": "punctuation.section.list-literal.begin.specman"
        },
        "push": [
          {
            "meta_content_scope": "meta.list-literal.specman"
          },
          {
            "include": "priority-scopes"
          },
          {
            "include": "list-literals"
          },
          {
            "match": "(;)",
            "scope": "punctuation.separator.specman"
          },
          {
            "match": "(\\})\\s*",
            "captures": {
              "1": "punctuation.section.list-literal.end.specman"
            },
            "pop": true
          }
        ]
      }
    ]
  }
}
