{
  "name": "specman",
  "scopeName": "source.specman",
  "patterns": [
    {"include": "#body_declaration" },
    {"include": "#out_of_body" }
  ],
  "repository": {
    "body_declaration": {
      "patterns": [
        {
          "begin": "<\\'",
          "beginCaptures": {
            "0": { "name": "punctuation.section.begin.body.specman" }
          },
          "end": "\\'>",
          "endCaptures": {
            "0": { "name": "punctuation.section.end.body.specman" }
          },
          "patterns": [
            { "include": "#package" },
            { "include": "#comment" },
            { "include": "#imports" },
            { "include": "#structs" },
            { "include": "#macros" },
            { "include": "#templates"},
            { "include": "#code"}
          ]
        }
      ]
    },
    "out_of_body": {
      "name": "comment.block.specman",
      "match": ".*"
    },
    "package": {
      "match": "\\b(package)\\s+(.*)(;)",
      "captures": {
        "1": {"name": "entity.name.namespace.specman"},
        "2": {"name": "entity.name.specman"},
        "3": {"name": "punctuation.terminator.specman"}
      }
    },
    "comment": {
      "match": "(//|--)(.*)",
      "captures": {
        "1": {"name": "punctuation.section.comment.specman"},
        "2": {"name": "comment.line.specman"}
      }
    },
    "imports": {
      "match": "\\b(import)\\s+(.*)(;)",
      "captures": {
        "1": {"name": "keyword.control.import.specman"},
        "2": {"name": "entity.name.filename.specman"},
        "3": {"name": "punctuation.terminator.specman"}
      }
    },
    "structs": {
      "patterns": [
        {
          "begin": "\\b(struct|unit)\\s+({{valid_id}})(?:\\s+(like)\\s+({{valid_id}}))?\\s*(?:of\\s+\\(\\s*({{valid_id}})\\s*\\))?\\s*(?:(implementing)\\s+({{valid_id}})(?:\\s*,\\s*({{valid_id}}))*)?\\s*(\\{)",
          "name": "meta.class.declaration.specman",
          "beginCaptures": {
            "1": {"name": "keyword.declaration.class.specman"},
            "2": {"name": "entity.name.class.specman"},
            "3": {"name": "keyword.declaration.like.specman"},
            "4": {"name": "entity.other.inherited-class.specman"},
            "5": {"name": "entity.other.template.specman"},
            "6": {"name": "keyword.declaration.interface.specman"},
            "7": {"name": "storage.type.interface.specman"},
            "8": {"name": "storage.type.interface.specman"},
            "9": {"name": "punctuation.section.class.begin.specman"}
          },
          "contentName": "meta.class.body.specman",
          "end": "(\\})\\s*(;)",
          "endCaptures": {
            "1": {"name": "punctuation.section.class.end.specman"},
            "2": {"name": "punctuation.terminator.specman"}
          },
          "patterns": [ { "include": "#code" } ]
        },
        {
          "name": "meta.class.declaration.specman",
          "begin": "(\\bextend|\\bwhen)(?:\\s+({{valid_determinant}}))+\\s*(\\{)",
          "beginCaptures": {
            "1": {"name": "keyword.declaration.class.specman"},
            "2": {"name": "entity.name.class.specman"},
            "3": {"name": "punctuation.section.class.begin.specman"}
          },
          "contentName": "meta.class.body.specman",
          "end": "(\\})\\s*(;)",
          "endCaptures": {
            "1": {"name": "punctuation.section.class.end.specman"},
            "2": {"name": "punctuation.terminator.specman"}
          },
          "patterns": [ { "include": "#code" } ]
        },
        {
          "name": "meta.class.declaration.specman",
          "begin": "(\\bpackage\\s*)?(\\binterface)(?:\\s+({{valid_id}}))(?:\\s+(like)\\s+({{valid_id}})(?:\\s*,\\s*({{valid_id}}))*)?\\s*(\\{)",
          "captures": {
            "1": {"name": "entity.name.namespace.specman"},
            "2": {"name": "keyword.declaration.interface.specman"},
            "3": {"name": "entity.name.interface.specman"},
            "4": {"name": "keyword.declaration.like.specman"},
            "5": {"name": "storage.type.interface.specman"},
            "6": {"name": "storage.type.interface.specman"},
            "7": {"name": "punctuation.section.interface.begin.specman"}
          },
          "contentName": "meta.class.body.specman",
          "end": "(\\})\\s*(;)",
          "endCaptures": {
            "1": {"name": "punctuation.section.class.end.specman"},
            "2": {"name": "punctuation.terminator.specman"}
          },
          "patterns": [ { "include": "#code" } ]
        }
      ]
    },
    "macros": {
      "match": "^\\s*(\\bdefine\\b)\\s+(?:{{valid_name}}\\b)",
      "name": "meta.preprocessor.macro.specman",
      "captures": {
        "1": {"name": "keyword.control.define.specman"},
        "2": {"name": "constant.other.specman"}
      }
    },
    "templates": {
      "name": "meta.class.declaration.template.specman",
      "match": "(package\\s+)?(template)\\s+(extend\\s+)?\\b(struct|unit|interface)\\b\\s+(?:({{valid_id}})\\s+)\\bof\\b\\s+",
      "captures": {
        "1": {"name": "entity.name.namespace.specman"},
        "2": {"name": "keyword.declaration.template.specman"},
        "3": {"name": "keyword.declaration.specman"},
        "4": {"name": "keyword.declaration.class.specman"},
        "5": {"name": "entity.name.class.template.specman"}
      }
    },
    "code": {
      "patterns": [
        { "include": "#member-declaration"},
        { "include": "#scalar-type-definition"},
        { "include": "#priority-scopes"}
      ]
    },
    "member-declaration": {
      "patterns": [
        {
          "match": "(?:({{struct_access}})\\s+)?(?:({{valid_id}})\\s*)(:)\\s*(\\blist\\s+of\\s*)?\\b(in|out|inout)\\b\\s+([a-z]+_port\\s+of)\\s",
          "captures": {
            "1": {"name": "storage.modifier.access.specman"},
            "2": {"name": "variable.other.member.specman"},
            "3": {"name": "punctuation.separator.type.specman"},
            "4": {"name": "storage.modifier.specman"},
            "5": {"name": "storage.modifier.direction.specman"},
            "6": {"name": "storage.type.specman"}
          }
        },
        {
          "match": "(?:({{struct_access}})\\s+)?(?:(static)\\s+)?(?:(const)\\s+)?([!|~])?\\s*(%)?\\s*({{valid_id}})\\s*(?:{{list_length_expr}})?(:)\\s*({{valid_type_no_modifier}})\\s*(;|=)",
          "captures": {
            "1": {"name": "storage.modifier.access.specman"},
            "2": {"name": "storage.modifier.static.specman"},
            "3": {"name": "storage.modifier.const.specman"},
            "4": {"name": "punctuation.definition.variable.generation.specman"},
            "5": {"name": "punctuation.definition.variable.physical.specman"},
            "6": {"name": "variable.other.member.specman"},
            "7": {"name": "punctuation.separator.type.specman"},
            "8": {"name": "storage.type.specman"},
            "9": {"name": "punctuation.terminator.specman"}
          }
        },
        {
          "match": "(?:({{struct_access}})\\s+)?(?:(static)\\s+)?(?:(const)\\s+)?([!|~]\\s*)?(%)?\\s*({{valid_id}})\\s*(?:{{list_length_expr}})?(:)\\s*({{valid_scalar_type}})\\s*",
          "captures": {
            "1": {"name": "storage.modifier.access.specman"},
            "2": {"name": "storage.modifier.static.specman"},
            "3": {"name": "storage.modifier.const.specman"},
            "4": {"name": "punctuation.definition.variable.generation.specman"},
            "5": {"name": "punctuation.definition.variable.physical.specman"},
            "6": {"name": "variable.other.member.specman"},
            "7": {"name": "punctuation.separator.type.specman"},
            "8": {"name": "storage.type.specman"}
          }
        },
        {
          "match": "(?:({{struct_access}})\\s+)?(?:(static)\\s+)?(?:(const)\\s+)?([!|~]\\s*)?(%)?\\s*({{valid_id}})\\s*(:)(?:{{valid_struct_type}})(?:\\s+(\\bis\\s+instance\\b))?\\s*(;|=)",
          "captures": {
            "1": {"name": "storage.modifier.access.specman"},
            "2": {"name": "storage.modifier.static.specman"},
            "3": {"name": "storage.modifier.const.specman"},
            "4": {"name": "punctuation.definition.variable.generation.specman"},
            "5": {"name": "punctuation.definition.variable.physical.specman"},
            "6": {"name": "variable.other.member.specman"},
            "7": {"name": "punctuation.separator.type.specman"},
            "8": {"name": "storage.type.class.specman"},
            "9": {"name": "storage.modifier.specman"},
            "10": {"name": "punctuation.terminator.specman"}
          }
        },
        {
          "match": "(?:({{struct_access}})\\s+)?(?:(static)\\s+)?(?:(const)\\s+)?([!|~]\\s*)?(%)?\\s*({{valid_id}})\\s*(:)\\s*(\\[\\s*)",
          "captures": {
            "1": {"name": "storage.modifier.access.specman"},
            "2": {"name": "storage.modifier.static.specman"},
            "3": {"name": "storage.modifier.const.specman"},
            "4": {"name": "punctuation.definition.variable.generation.specman"},
            "5": {"name": "punctuation.definition.variable.physical.specman"},
            "6": {"name": "variable.other.member.enum.specman"},
            "7": {"name": "punctutation.separator.type.specman"},
            "8": {"name": "punctuation.brackets.begin.specman"}
          }
          {# include "patterns": "enum-values-declaration" #}
        },
        {
          "match": "(?:(static)\\s+)?(event)\\s+({{valid_id}})(?:\\s+(is)\\s+(only)*)?",
          "captures": {
            "1": {"name": "storage.modifier.static.specman"},
            "2": {"name": "storage.type.specman"},
            "3": {"name": "variable.other.member.event.specman"},
            "4": {"name": "keyword.other.event.specman"},
            "5": {"name": "keyword.modifier.event.specman"}
          }
        }
      ]
    },
    "scalar-type-definition": {
      "patterns": [
        {
          "match": "\\b(type|extend)\\b\\s+({{valid_id}})\\s*(:)\\s*{{valid_type}}",
          "captures": {
            "1": {"name": "keyword.declaration.specman"},
            "2": {"name": "storage.type.specman"},
            "3": {"name": "punctuation.separator.type.specman"},
            "4": {"name": "storage.type.specman"}
          }
        },
        {
          "contentName": "meta.type.enum.specman",
          "begin": "\\b(type|extend)\\b\\s+({{valid_id}})\\s*(:)\\s*(\\[\\s*)",
          "beginCaptures": {
            "1": {"name": "keyword.declaration.specman"},
            "2": {"name": "storage.type.enum.specman"},
            "3": {"name": "punctuation.separator.type.specman"},
            "4": {"name": "punctuation.brackets.begin.specman"}
          },
          "patterns": [
            { "include": "#enum-values-declaration"}
          ],
          "end": "(\\]\\s*)(\\(\\s*(bits|bytes)\\s*:\\s*[\\d\\*]+\\s*\\))?(\\s*;)",
          "endCaptures": {
            "1": {"name": "punctuation.brackets.end.specman"},
            "2": {"name": "meta.width-modifier.specman"},
            "3": {"name": "keyword.operator.width-modifier.specman"},
            "4": {"name": "punctuation.terminator.specman"}
          }
        }
      ]
    },
    "enum-values-declaration": {
      "patterns": [
        {
          "match": "(\\s*,)",
          "captures": {
            "1": {"name": "punctuation.separator.specman"}
          }
        },
        {
          "match": "(\\s*,)?(?:\\s*({{valid_id}})\\s*)(=\\s*)?",
          "captures": {
            "1": {"name": "punctuation.separator.specman"},
            "2": {"name": "constant.other.enum.specman"},
            "3": {"name": "keyword.operator.assignment.specman"}
          }
        }
      ]
    },
    "priority-scopes": {
      "patterns": [
        { "include": "#literals" },
        { "include": "#template-params" },
        { "include": "#operators" },
        { "include": "built-in-variables" },
        { "include": "type-casting" },
        { "include": "preprocessor" },
        { "include": "built-in-function-calls" }
      ]
    },
    "literals" : {
      "patterns": [
        {
          "match": "\\b((?:\\d+)(')(?:[oO])[0-7xXzZuUlLhHwWnN]([0-7xXzZuUlLhHwWnN_]+)?)\\b",
          "captures": {
            "1": {"name": "constant.numeric.mvl.octal.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)(')(?:[dD])[0-9xXzZuUlLhHwWnN]([0-9xXzZuUlLhHwWnN_]+)?)\\b",
          "captures": {
            "1": {"name": "constant.numeric.mvl.decimal.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)(')(?:[hHxX])[0-9a-fA-FxXzZuUlLhHwWnN]([0-9a-fA-FxXzZuUlLhHwWnN_]+)?)\\b",
          "captures": {
            "1": {"name": "constant.numeric.mvl.hex.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)(')(?:[bB])[0-1xXzZuUlLhHwWnN]([0-1xXzZuUlLhHwWnN_]+)?)\\b",
          "captures": {
            "1": {"name": "constant.numeric.mvl.binary.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b(-?([0-9_]+[kKmM]?))\\b",
          "name": "constant.numeric.unsized.integer.specman"
        },
        {
          "match": "\\b(0(?:[bB])\\s*[0-1_xXzZ?]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.unsized.binary.specman"}
          }
        },
        {
          "match": "\\b(0(?:[xX])\\s*[0-9a-fA-F_xXzZ?]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.unsized.hex.specman"}
          }
        },
        {
          "match": "\\b(0(?:[oO])\\s*[0-9a-fA-F_xXzZ?]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.unsized.octal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)?(')(?:[dD])\\s*[0-9_]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.sized.integer.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)?(')(?:[bB])\\s*[0-1_]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.sized.binary.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)?(')(?:[hHxX])\\s*[0-9a-fA-F_]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.sized.hex.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)?(')(?:[oO])\\s*[0-7_]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.sized.octal.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b([0-9][\\.0-9_]*(?:[eE][\\+\\-]?[0-9][0-9_]*))\\b",
          "captures": {
            "1": {"name": "constant.numeric.real.specman"}
          }
        },
        {
          "match": "\\b({{built_in_constants}})\\b",
          "name": "constant.language.specman"
        },
        {
          "match": "\"",
          "name": "punctuation.definition.string.begin.specman"
          {# TODO "push": "string" #}
        },
        {
          "match": "0c\"[a-zA-Z]\"",
          "name": "constant.character.literal.specman"
        }
      ]
    },
    "template-params": {
      "patterns": [
        {
          "match": "(<)\\s*(?:{{valid_id}}\\s*)\\'\\s*\\b(type|exp)(\\s*>\\s*)(:\\s*)({{scalar_types}})",
          "captures": {
            "1": {"name": "punctuation.separator.specman"},
            "2": {"name": "variable.parameter.template.specman"},
            "3": {"name": "keyword.declaration.specman"},
            "4": {"name": "punctuation.separator.specman"},
            "5": {"name": "punctuation.separator.specman"},
            "6": {"name": "storage.type.specman"}
          }
        },
        {
          "match": "(<)\\s*(?:{{valid_id}}\\s*)\\'\\s*\\b(type|exp)(\\s*>\\s*)(?:(:\\s*)(struct|interface|object|list|scalar|numeric|custom_numeric|enum|port))?",
          "captures": {
            "1": {"name": "punctuation.separator.specman"},
            "2": {"name": "variable.parameter.template.specman"},
            "3": {"name": "keyword.declaration.specman"},
            "4": {"name": "punctuation.separator.specman"},
            "5": {"name": "punctuation.separator.specman"},
            "6": {"name": "storage.type.category.specman"}
          }
        },
        {
          "match": "(<)\\s*(?:{{valid_id}}\\s*)\\'\\s*\\b(?:{{valid_id}}\\s*)(>)",
          "captures": {
            "1": {"name": "punctuation.separator.specman"},
            "2": {"name": "variable.parameter.template.specman"},
            "3": {"name": "keyword.declaration.specman"},
            "4": {"name": "punctuation.separator.specman"}
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.word.specman",
          "match": "\\b(and|or|not|now|in|in_table)\\b"
        },
        {
          "name": "keyword.operator.boolean.specman",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.logical.specman",
          "match": "(=>)"
        },
        {
          "name": "keyword.operator.assignment.specman",
          "match": "(=|\\+=|-=|\\*=|:=)"
        },
        {
          "name": "keyword.operator.comparison.specman",
          "match": "(==|!=|>|<|===|!===|>=|<=)"
        },
        {
          "name": "keyword.operator.arithmetic.specman",
          "match": "(-|\\+|\\*|/)"
        },
        {
          "name": "keyword.operator.bitwise.specman",
          "match": "(&|\\||~|!|\\^)"
        },
        {
          "name": "keyword.operator.width-modifier.specman",
          "match": "\\bbits\\b|\\bbytes\\b"
        },
        {
          "name": "keyword.operator.accessor.event.specman",
          "match": "\\@"
        }
      ]
    }
  }
}