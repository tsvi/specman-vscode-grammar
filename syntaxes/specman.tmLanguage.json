{
  "name": "specman",
  "scopeName": "source.specman",
  "patterns": [
    {"include": "#body_declaration" },
    {"include": "#out_of_body" }
  ],
  "repository": {
    "body_declaration": {
      "patterns": [
        {
          "begin": "<\\'",
          "beginCaptures": {
            "0": { "name": "punctuation.section.begin.body.specman" }
          },
          "end": "\\'>",
          "endCaptures": {
            "0": { "name": "punctuation.section.end.body.specman" }
          },
          "patterns": [
            { "include": "#package" },
            { "include": "#comment" },
            { "include": "#imports" },
            { "include": "#structs" },
            { "include": "#macros" },
            { "include": "#templates"},
            { "include": "#code"}
          ]
        }
      ]
    },
    "out_of_body": {
      "name": "comment.block.specman",
      "match": ".*"
    },
    "package": {
      "match": "\\b(package)\\s+(.*)(;)",
      "captures": {
        "1": {"name": "entity.name.namespace.specman"},
        "2": {"name": "entity.name.specman"},
        "3": {"name": "punctuation.terminator.specman"}
      }
    },
    "comment": {
      "match": "(//|--)(.*)",
      "captures": {
        "1": {"name": "punctuation.section.comment.specman"},
        "2": {"name": "comment.line.specman"}
      }
    },
    "imports": {
      "match": "\\b(import)\\s+(.*)(;)",
      "captures": {
        "1": {"name": "keyword.control.import.specman"},
        "2": {"name": "entity.name.filename.specman"},
        "3": {"name": "punctuation.terminator.specman"}
      }
    },
    "structs": {
      "patterns": [
        {
          "begin": "\\b(struct|unit)\\s+([a-zA-Z](?:[a-zA-Z0-9_]+)?)(?:\\s+(like)\\s+([a-zA-Z](?:[a-zA-Z0-9_]+)?))?\\s*(?:of\\s+\\(\\s*([a-zA-Z](?:[a-zA-Z0-9_]+)?)\\s*\\))?\\s*(?:(implementing)\\s+([a-zA-Z](?:[a-zA-Z0-9_]+)?)(?:\\s*,\\s*([a-zA-Z](?:[a-zA-Z0-9_]+)?))*)?\\s*(\\{)",
          "name": "meta.class.declaration.specman",
          "beginCaptures": {
            "1": {"name": "keyword.declaration.class.specman"},
            "2": {"name": "entity.name.class.specman"},
            "3": {"name": "keyword.declaration.like.specman"},
            "4": {"name": "entity.other.inherited-class.specman"},
            "5": {"name": "entity.other.template.specman"},
            "6": {"name": "keyword.declaration.interface.specman"},
            "7": {"name": "storage.type.interface.specman"},
            "8": {"name": "storage.type.interface.specman"},
            "9": {"name": "punctuation.section.class.begin.specman"}
          },
          "contentName": "meta.class.body.specman",
          "end": "(\\})\\s*(;)",
          "endCaptures": {
            "1": {"name": "punctuation.section.class.end.specman"},
            "2": {"name": "punctuation.terminator.specman"}
          },
          "patterns": [ { "include": "#code" } ]
        },
        {
          "name": "meta.class.declaration.specman",
          "begin": "(\\bextend|\\bwhen)(?:\\s+((?:[a-zA-Z](?:[a-zA-Z0-9_\\']+)?)))+\\s*(\\{)",
          "beginCaptures": {
            "1": {"name": "keyword.declaration.class.specman"},
            "2": {"name": "entity.name.class.specman"},
            "3": {"name": "punctuation.section.class.begin.specman"}
          },
          "contentName": "meta.class.body.specman",
          "end": "(\\})\\s*(;)",
          "endCaptures": {
            "1": {"name": "punctuation.section.class.end.specman"},
            "2": {"name": "punctuation.terminator.specman"}
          },
          "patterns": [ { "include": "#code" } ]
        },
        {
          "name": "meta.class.declaration.specman",
          "begin": "(\\bpackage\\s*)?(\\binterface)(?:\\s+([a-zA-Z](?:[a-zA-Z0-9_]+)?))(?:\\s+(like)\\s+([a-zA-Z](?:[a-zA-Z0-9_]+)?)(?:\\s*,\\s*([a-zA-Z](?:[a-zA-Z0-9_]+)?))*)?\\s*(\\{)",
          "captures": {
            "1": {"name": "entity.name.namespace.specman"},
            "2": {"name": "keyword.declaration.interface.specman"},
            "3": {"name": "entity.name.interface.specman"},
            "4": {"name": "keyword.declaration.like.specman"},
            "5": {"name": "storage.type.interface.specman"},
            "6": {"name": "storage.type.interface.specman"},
            "7": {"name": "punctuation.section.interface.begin.specman"}
          },
          "contentName": "meta.class.body.specman",
          "end": "(\\})\\s*(;)",
          "endCaptures": {
            "1": {"name": "punctuation.section.class.end.specman"},
            "2": {"name": "punctuation.terminator.specman"}
          },
          "patterns": [ { "include": "#code" } ]
        }
      ]
    },
    "macros": {
      "match": "^\\s*(\\bdefine\\b)\\s+(?:([a-zA-Z](?:[a-zA-Z0-9_.:]+)?)\\b)",
      "name": "meta.preprocessor.macro.specman",
      "captures": {
        "1": {"name": "keyword.control.define.specman"},
        "2": {"name": "constant.other.specman"}
      }
    },
    "templates": {
      "name": "meta.class.declaration.template.specman",
      "match": "(package\\s+)?(template)\\s+(extend\\s+)?\\b(struct|unit|interface)\\b\\s+(?:([a-zA-Z](?:[a-zA-Z0-9_]+)?)\\s+)\\bof\\b\\s+",
      "captures": {
        "1": {"name": "entity.name.namespace.specman"},
        "2": {"name": "keyword.declaration.template.specman"},
        "3": {"name": "keyword.declaration.specman"},
        "4": {"name": "keyword.declaration.class.specman"},
        "5": {"name": "entity.name.class.template.specman"}
      }
    },
    "code": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#member-declaration"},
        { "include": "#priority-scopes"},
        { "include": "#scalar-types" },
        
        { "include": "#scalar-type-definition" },
        { "include": "#checks" },
        { "include": "#constraint-def" },
        { "include": "#code-blocks" },
        
        
        { "include": "#default-scopes" }
      ]
    },
    "member-declaration": {
      "patterns": [
        {
          "match": "(?:(package|protected|private)\\s+)?(?:([a-zA-Z](?:[a-zA-Z0-9_]+)?)\\s*)(:)\\s*(\\blist\\s+of\\s*)?\\b(in|out|inout)\\b\\s+([a-z]+_port\\s+of)\\s",
          "captures": {
            "1": {"name": "storage.modifier.access.specman"},
            "2": {"name": "variable.other.member.specman"},
            "3": {"name": "punctuation.separator.type.specman"},
            "4": {"name": "storage.modifier.specman"},
            "5": {"name": "storage.modifier.direction.specman"},
            "6": {"name": "storage.type.specman"}
          }
        },
        {
          "match": "(?:(package|protected|private)\\s+)?(?:(static)\\s+)?(?:(const)\\s+)?([!|~])?\\s*(%)?\\s*([a-zA-Z](?:[a-zA-Z0-9_]+)?)\\s*(?:(?:\\[\\s*[a-zA-Z0-9_]+\\s*\\]\\s*)+)?(:)\\s*((?:(?:list(?:\\s*key\\s*:\\s*[a-zA-Z](?:[a-zA-Z0-9_]+)?)?\\s+of\\s+))*(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?))\\s*(;|=)",
          "captures": {
            "1": {"name": "storage.modifier.access.specman"},
            "2": {"name": "storage.modifier.static.specman"},
            "3": {"name": "storage.modifier.const.specman"},
            "4": {"name": "punctuation.definition.variable.generation.specman"},
            "5": {"name": "punctuation.definition.variable.physical.specman"},
            "6": {"name": "variable.other.member.specman"},
            "7": {"name": "punctuation.separator.type.specman"},
            "8": {"name": "storage.type.specman"},
            "9": {"name": "punctuation.terminator.specman"}
          }
        },
        {
          "match": "(?:(package|protected|private)\\s+)?(?:(static)\\s+)?(?:(const)\\s+)?([!|~]\\s*)?(%)?\\s*([a-zA-Z](?:[a-zA-Z0-9_]+)?)\\s*(?:(?:\\[\\s*[a-zA-Z0-9_]+\\s*\\]\\s*)+)?(:)\\s*((?:(?:list(?:\\s*key\\s*:\\s*[a-zA-Z](?:[a-zA-Z0-9_]+)?)?\\s+of\\s+))*\\b(?:int|uint|longint|longuint|bit|nibble|byte|time|bool|numeric)(?:\\[\\s*\\S+\\s*\\.\\.\\s*\\S+\\s*\\])?\\s*(?:)?)\\s*",
          "captures": {
            "1": {"name": "storage.modifier.access.specman"},
            "2": {"name": "storage.modifier.static.specman"},
            "3": {"name": "storage.modifier.const.specman"},
            "4": {"name": "punctuation.definition.variable.generation.specman"},
            "5": {"name": "punctuation.definition.variable.physical.specman"},
            "6": {"name": "variable.other.member.specman"},
            "7": {"name": "punctuation.separator.type.specman"},
            "8": {"name": "storage.type.specman"}
          }
        },
        {
          "match": "(?:(package|protected|private)\\s+)?(?:(static)\\s+)?(?:(const)\\s+)?([!|~]\\s*)?(%)?\\s*([a-zA-Z](?:[a-zA-Z0-9_]+)?)\\s*(:)(?:(?:(?:list(?:\\s*key\\s*:\\s*[a-zA-Z](?:[a-zA-Z0-9_]+)?)?\\s+of\\s+))*(?:\\b(?:[a-zA-Z](?:[a-zA-Z0-9_\\']+)?)\\s+)*?((?:[a-zA-Z](?:[a-zA-Z0-9_\\']+)?)))(?:\\s+(\\bis\\s+instance\\b))?\\s*(;|=)",
          "captures": {
            "1": {"name": "storage.modifier.access.specman"},
            "2": {"name": "storage.modifier.static.specman"},
            "3": {"name": "storage.modifier.const.specman"},
            "4": {"name": "punctuation.definition.variable.generation.specman"},
            "5": {"name": "punctuation.definition.variable.physical.specman"},
            "6": {"name": "variable.other.member.specman"},
            "7": {"name": "punctuation.separator.type.specman"},
            "8": {"name": "storage.type.class.specman"},
            "9": {"name": "storage.modifier.specman"},
            "10": {"name": "punctuation.terminator.specman"}
          }
        },
        {
          "match": "(?:(package|protected|private)\\s+)?(?:(static)\\s+)?(?:(const)\\s+)?([!|~]\\s*)?(%)?\\s*([a-zA-Z](?:[a-zA-Z0-9_]+)?)\\s*(:)\\s*(\\[\\s*)",
          "captures": {
            "1": {"name": "storage.modifier.access.specman"},
            "2": {"name": "storage.modifier.static.specman"},
            "3": {"name": "storage.modifier.const.specman"},
            "4": {"name": "punctuation.definition.variable.generation.specman"},
            "5": {"name": "punctuation.definition.variable.physical.specman"},
            "6": {"name": "variable.other.member.enum.specman"},
            "7": {"name": "punctutation.separator.type.specman"},
            "8": {"name": "punctuation.brackets.begin.specman"}
          },
          "patterns": [{"include": "#enum-values-declaration"}]
        },
        {
          "match": "(?:(static)\\s+)?(event)\\s+([a-zA-Z](?:[a-zA-Z0-9_]+)?)(?:\\s+(is)\\s+(only)*)?",
          "captures": {
            "1": {"name": "storage.modifier.static.specman"},
            "2": {"name": "storage.type.specman"},
            "3": {"name": "variable.other.member.event.specman"},
            "4": {"name": "keyword.other.event.specman"},
            "5": {"name": "keyword.modifier.event.specman"}
          }
        }
      ]
    },
    "scalar-type-definition": {
      "patterns": [
        {
          "match": "\\b(type|extend)\\b\\s+([a-zA-Z](?:[a-zA-Z0-9_]+)?)\\s*(:)\\s*(?:(?:list(?:\\s*key\\s*:\\s*[a-zA-Z](?:[a-zA-Z0-9_]+)?)?\\s+of\\s+))*(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s*)(?:\\[\\s*\\S+\\s*\\.\\.\\s*\\S+\\s*\\])?\\s*(?:)?",
          "captures": {
            "1": {"name": "keyword.declaration.specman"},
            "2": {"name": "storage.type.specman"},
            "3": {"name": "punctuation.separator.type.specman"},
            "4": {"name": "storage.type.specman"}
          }
        },
        {
          "contentName": "meta.type.enum.specman",
          "begin": "\\b(type|extend)\\b\\s+([a-zA-Z](?:[a-zA-Z0-9_]+)?)\\s*(:)\\s*(\\[\\s*)",
          "beginCaptures": {
            "1": {"name": "keyword.declaration.specman"},
            "2": {"name": "storage.type.enum.specman"},
            "3": {"name": "punctuation.separator.type.specman"},
            "4": {"name": "punctuation.brackets.begin.specman"}
          },
          "patterns": [
            { "include": "#enum-values-declaration"}
          ],
          "end": "(\\]\\s*)(\\(\\s*(bits|bytes)\\s*:\\s*[\\d\\*]+\\s*\\))?(\\s*;)",
          "endCaptures": {
            "1": {"name": "punctuation.brackets.end.specman"},
            "2": {"name": "meta.width-modifier.specman"},
            "3": {"name": "keyword.operator.width-modifier.specman"},
            "4": {"name": "punctuation.terminator.specman"}
          }
        }
      ]
    },
    "enum-values-declaration": {
      "patterns": [
        {
          "match": "(\\s*,)",
          "captures": {
            "1": {"name": "punctuation.separator.specman"}
          }
        },
        {
          "match": "(\\s*,)?(?:\\s*([a-zA-Z](?:[a-zA-Z0-9_]+)?)\\s*)(=\\s*)?",
          "captures": {
            "1": {"name": "punctuation.separator.specman"},
            "2": {"name": "constant.other.enum.specman"},
            "3": {"name": "keyword.operator.assignment.specman"}
          }
        },
        { "include": "#literals" },
        { "include": "#operators" }
      ]
    },
    "priority-scopes": {
      "patterns": [
        { "include": "#literals" },
        { "include": "#template-params" },
        { "include": "#operators" },
        { "include": "#built-in-variables" },
        
        { "include": "#preprocessor" }
        
      ]
    },
    "literals" : {
      "patterns": [
        {
          "match": "\\b((?:\\d+)(')(?:[oO])[0-7xXzZuUlLhHwWnN]([0-7xXzZuUlLhHwWnN_]+)?)\\b",
          "captures": {
            "1": {"name": "constant.numeric.mvl.octal.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)(')(?:[dD])[0-9xXzZuUlLhHwWnN]([0-9xXzZuUlLhHwWnN_]+)?)\\b",
          "captures": {
            "1": {"name": "constant.numeric.mvl.decimal.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)(')(?:[hHxX])[0-9a-fA-FxXzZuUlLhHwWnN]([0-9a-fA-FxXzZuUlLhHwWnN_]+)?)\\b",
          "captures": {
            "1": {"name": "constant.numeric.mvl.hex.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)(')(?:[bB])[0-1xXzZuUlLhHwWnN]([0-1xXzZuUlLhHwWnN_]+)?)\\b",
          "captures": {
            "1": {"name": "constant.numeric.mvl.binary.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b(-?([0-9_]+[kKmM]?))\\b",
          "name": "constant.numeric.unsized.integer.specman"
        },
        {
          "match": "\\b(0(?:[bB])\\s*[0-1_xXzZ?]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.unsized.binary.specman"}
          }
        },
        {
          "match": "\\b(0(?:[xX])\\s*[0-9a-fA-F_xXzZ?]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.unsized.hex.specman"}
          }
        },
        {
          "match": "\\b(0(?:[oO])\\s*[0-9a-fA-F_xXzZ?]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.unsized.octal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)?(')(?:[dD])\\s*[0-9_]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.sized.integer.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)?(')(?:[bB])\\s*[0-1_]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.sized.binary.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)?(')(?:[hHxX])\\s*[0-9a-fA-F_]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.sized.hex.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b((?:\\d+)?(')(?:[oO])\\s*[0-7_]+)\\b",
          "captures": {
            "1": {"name": "constant.numeric.sized.octal.specman"},
            "2": {"name": "punctuation.separator.literal.specman"}
          }
        },
        {
          "match": "\\b([0-9][\\.0-9_]*(?:[eE][\\+\\-]?[0-9][0-9_]*))\\b",
          "captures": {
            "1": {"name": "constant.numeric.real.specman"}
          }
        },
        {
          "match": "\\b(TRUE|FALSE|NULL|UNDEF|MAX_INT|MIN_INT|MAX_LONGINT|MIN_LONGINT|MAX_UINT|MAX_LONGUINT|SN_M_E|SN_M_LOG2E|SN_M_LOG10E|SN_M_LN2|SN_M_LN10|SN_M_PI|SN_M_TWO_PI|SN_M_PI_2|SN_M_PI_4|SN_M_1_PI|SN_M_2_PI|SN_M_2_SQRTPI|SN_M_SQRT2|SN_M_SQRT1_2)\\b",
          "name": "constant.language.specman"
        },
        {
          "match": "0c\"[a-zA-Z]\"",
          "name": "constant.character.literal.specman"
        },
        {"include": "#string"}
      ]
    },
    "template-params": {
      "patterns": [
        {
          "match": "(<)\\s*(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s*)\\'\\s*\\b(type|exp)(\\s*>\\s*)(:\\s*)(int|uint|longint|longuint|bit|nibble|byte|time|bool|numeric)",
          "captures": {
            "1": {"name": "punctuation.separator.specman"},
            "2": {"name": "variable.parameter.template.specman"},
            "3": {"name": "keyword.declaration.specman"},
            "4": {"name": "punctuation.separator.specman"},
            "5": {"name": "punctuation.separator.specman"},
            "6": {"name": "storage.type.specman"}
          }
        },
        {
          "match": "(<)\\s*(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s*)\\'\\s*\\b(type|exp)(\\s*>\\s*)(?:(:\\s*)(struct|interface|object|list|scalar|numeric|custom_numeric|enum|port))?",
          "captures": {
            "1": {"name": "punctuation.separator.specman"},
            "2": {"name": "variable.parameter.template.specman"},
            "3": {"name": "keyword.declaration.specman"},
            "4": {"name": "punctuation.separator.specman"},
            "5": {"name": "punctuation.separator.specman"},
            "6": {"name": "storage.type.category.specman"}
          }
        },
        {
          "match": "(<)\\s*(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s*)\\'\\s*\\b(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s*)(>)",
          "captures": {
            "1": {"name": "punctuation.separator.specman"},
            "2": {"name": "variable.parameter.template.specman"},
            "3": {"name": "keyword.declaration.specman"},
            "4": {"name": "punctuation.separator.specman"}
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.word.specman",
          "match": "\\b(and|or|not|now|in|in_table)\\b"
        },
        {
          "name": "keyword.operator.boolean.specman",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.logical.specman",
          "match": "(=>)"
        },
        {
          "name": "keyword.operator.assignment.specman",
          "match": "(=|\\+=|-=|\\*=|:=)"
        },
        {
          "name": "keyword.operator.comparison.specman",
          "match": "(==|!=|>|<|===|!===|>=|<=)"
        },
        {
          "name": "keyword.operator.arithmetic.specman",
          "match": "(-|\\+|\\*|/)"
        },
        {
          "name": "keyword.operator.bitwise.specman",
          "match": "(&|\\||~|!|\\^)"
        },
        {
          "name": "keyword.operator.width-modifier.specman",
          "match": "\\bbits\\b|\\bbytes\\b"
        },
        {
          "name": "keyword.operator.accessor.event.specman",
          "match": "\\@"
        }
      ]
    },
    "built-in-variables": {
      "patterns": [
        {
          "match": "\\b(it|me|index|result)\\b",
          "captures": {
            "1": {"name": "variable.language.specman"}
          }
        }
      ]
    },
    "scalar-types": {
      "patterns": [
        {
          "match": "\\s*(?:\\b(?:(?:list(?:\\s*key\\s*:\\s*[a-zA-Z](?:[a-zA-Z0-9_]+)?)?\\s+of\\s+))*\\b(?:int|uint|longint|longuint|bit|nibble|byte|time|bool|numeric)(?:\\[\\s*\\S+\\s*\\.\\.\\s*\\S+\\s*\\])?\\s*(?:)?)\\b",
          "captures": {
            "1": {"name": "storage.type.specman"}
          }
        }
      ]
    },
    "checks": {
      "patterns": [
        {
          "match": "(\\bcheck\\b)\\s+(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s+)?(\\bthat\\b)?\\s+",
          "captures": {
            "1": {"name": "keyword.statement.specman"},
            "2": {"name": "entity.name.label.specman"},
            "3": {"name": "keyword.other.specman"}
          }
        }
      ]
    },
    "constraint-def": {
      "patterns": [
        {
          "match": "(\\bkeep\\b)\\s+(?:\\s*([a-zA-Z](?:[a-zA-Z0-9_.:]+)?))\\.(reset_soft)",
          "captures": {
            "1":  {"name": "keyword.other.constraint.specman"},
            "2":  {"name": "variable.other.specman"},
            "3":  {"name": "keyword.modifier.constraint.specman"}
          }
        },
        {
          "match": "(\\bkeep\\b)\\s+(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s+(is)\\s+)?(\\bsoft\\b)?\\s*(\\bfor\\s+each\\b)\\s*(?:\\(\\s*[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s*\\)\\s*)?(?:\\busing\\s+index\\s*\\(\\s*[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s*\\)\\s*)?(in)\\s+(?:([a-zA-Z](?:[a-zA-Z0-9_.:]+)?))(?=\\s*\\{)",
          "captures": {
            "1":  {"name": "keyword.other.constraint.specman"},
            "2":  {"name": "entity.name.label.specman"},
            "3":  {"name": "keyword.other.constraint.specman"},
            "4":  {"name": "keyword.modifier.constraint.specman"},
            "5":  {"name": "keyword.control.specman"},
            "6":  {"name": "variable.other.specman"},
            "7":  {"name": "variable.other.specman"},
            "8":  {"name": "keyword.control.specman"},
            "9":  {"name": "variable.other.specman"}
          }
        },
        {
          "match": "(\\bkeep\\b)\\s+(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s+(is)\\s+)?(all\\s+of\\b)(?=\\s*\\{)",
          "captures": {
            "1":  {"name": "keyword.other.constraint.specman"},
            "2":  {"name": "entity.name.label.specman"},
            "3":  {"name": "keyword.other.constraint.specman"},
            "4":  {"name": "keyword.control.constraint.specman"}
          }
        },
        {
          "match": "(\\bkeep\\b)\\s+(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s+(is)\\s+)?(\\bsoft\\b)?\\s*(?=.*\\s*(=>))",
          "captures": {
            "1":  {"name": "keyword.other.constraint.specman"},
            "2":  {"name": "entity.name.label.specman"},
            "3":  {"name": "keyword.other.constraint.specman"},
            "4":  {"name": "keyword.modifier.constraint.specman"}
          }
          
        },
        {
          "match": "(\\bkeep\\b)\\s+(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s+(is)\\s+)?(\\bsoft\\b)?\\s*(?:([a-zA-Z](?:[a-zA-Z0-9_.:]+)?)\\s*)(\\bbefore\\b)\\s*(?:([a-zA-Z](?:[a-zA-Z0-9_.:]+)?))(;)",
          "captures": {
            "1":  {"name": "keyword.other.constraint.specman"},
            "2":  {"name": "entity.name.label.specman"},
            "3":  {"name": "keyword.other.constraint.specman"},
            "4":  {"name": "keyword.modifier.constraint.specman"},
            "5":  {"name": "variable.other.specman"},
            "6":  {"name": "keyword.other.constraint.specman"},
            "7":  {"name": "variable.other.specman"},
            "8":  {"name": "punctuation.terminator.specman"}
          }
        },
        {
          "match": "(\\bkeep\\b)\\s+(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s+(is)\\s+)?(\\bsoft\\b)\\s*(?:([a-zA-Z](?:[a-zA-Z0-9_.:]+)?))\\s+(==)\\s+(\\bselect\\b)",
          "captures": {
            "1":  {"name": "keyword.other.constraint.specman"},
            "2":  {"name": "entity.name.label.specman"},
            "3":  {"name": "keyword.other.constraint.specman"},
            "4":  {"name": "keyword.modifier.constraint.specman"},
            "5":  {"name": "variable.other.specman"},
            "6":  {"name": "keyword.operator.assignment.specman"},
            "7":  {"name": "keyword.other.constraint.specman"}
          }
        },
        {
          "match": "(\\bkeep\\b)\\s+(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s+(is)\\s+)?(\\bsoft\\b)?\\s*",
          "captures": {
            "1":  {"name": "keyword.other.constraint.specman"},
            "2":  {"name": "entity.name.label.specman"},
            "3":  {"name": "keyword.other.constraint.specman"},
            "4":  {"name": "keyword.modifier.constraint.specman"}
          }
          
        }
      ]
    },
    "default-scopes": {
      "patterns": [
        {
          "name": "keyword.other.specman",
          "match": "\\b(soft|compute|new)\\b"
        },
        {
          "name": "keyword.other.statement.specman",
          "match": "\\b(keep|export|extend|template|on|expect|routine|specman|radix|ignore|illegal|traceable|untraceable|cover|using|count_only|trace_only|at_least|transition|item|ranges|cross|text|call|task|within)\\b"
        },
        {
          "name": "support.function.builtin.specman meta.function-call.builtin.specman",
          "match": "\\b(initialize|delayed|exit|finish|post_generate|pre_generate|wave_setup|setup|setup_test|finalize|finalize_test|extract_test|run_test|get_timescale|is_gui|print_stack_trace|simulator_exists|simulator_save|sn_plusargs_exists|sn_plusarg_value|pre_save|pre_restore|post_restore|remap_tick_access|set_config|lock|unlock|release|swap|value|stop_run|get_config|get_indices|exec)\\b"
        },
        {
          "name": "keyword.control.specman",
          "match": "\\b(until|repeat|while|for|from|to|step|each|do|break|continue|before|next|always|in|return|keeping)\\b"
        },
        {
          "name": "keyword.other.packing.specman",
          "match": "\\b(packing|low|high|network)\\b"
        },
        {
          "name": "keyword.conditional.specman",
          "match": "\\b(choose|matches|if|then|else|try|case|casex|casez|default)\\b"
        },
        {
          "name": "keyword.other.temporal.specman",
          "match": "\\b(cycle|sample|event|forever|wait|change|negedge|rise|fall|delay|sync|sim|true|detach|eventually|emit)\\b"
        },
        {
          "name": "keyword.other.define.specman",
          "match": "\\b(define|as|computed|verilog|vhdl|variable)\\b"
        },
        {
          "name": "keyword.other.singleton.specman",
          "match": "\\b(sys|global|utils|message_manager|tf_domain_manager|rf_manager)\\b"
        },
        {
          "name": "keyword.other.file.specman",
          "match": "\\b(files|load|ntv|source_ref|script|read|write)\\b"
        },
        {
          "name": "keyword.other.fsm.specman",
          "match": "\\b(initial|idle|others|posedge|clock|cycles)\\b"
        },
        {
          "name": "storage.modifier.specman",
          "match": "\\b(is\\s+instance|list\\s+of|attribute|::)\\b"
        },
        {
          "name": "keyword.declaration.specman",
          "match": "\\b(DPI-C|like|implementing|conditions|created_driver|created_kind|testflow|uvm_build_config|import_python)\\b"
        },
        {
          "name": "punctuation.terminator.specman",
          "match": "\\s*;"
        }
      ]
    },
    "code-blocks": {
      "patterns": [
        {
          "begin": "(\\bon\\b)\\s*([a-zA-Z](?:[a-zA-Z0-9_.:]+)?)\\s*(\\{)",
          "beginCaptures": {
            "1": {"name": "keyword.control.specman"},
            "2": {"name": "variable.other.specman"},
            "3": {"name": "punctuation.section.block.begin.specman"}
          },
          "contentName": "meta.code_block.specman",
          "end": "(\\})\\s*(;)?",
          "endCaptures": {
            "1": {"name": "punctuation.section.block.end.specman"},
            "2": {"name": "punctuation.terminator.specman"}
          },
          "patterns": [{"include": "#actions"}]
        },
        {
          "begin": "(\\bfirst\\s+of|all\\s+of\\b)?\\s*\\{",
          "beginCaptures": {
            "1":  {"name": "keyword.control.specman"}
          },
          "name": "punctuation.section.block.begin.specman",
          "contentName": "meta.code_block.specman",
          "end": "(\\})\\s*(;)?",
          "endCaptures": {
            "1": {"name": "punctuation.section.block.end.specman"},
            "2": {"name": "punctuation.terminator.specman"}
          },
          "patterns": [{"include": "#actions"}]
        }
      ]
    },
    "actions": {
      "name": "meta.actions.specman",
      "patterns" : [
        { "include": "#priority-scopes" },
        { "include": "#inline-generation" },
        { "include": "#struct-allocation" },
        { "include": "#variable-declaration" },
        { "include": "#checks" },
        
        { "include": "#code-blocks" },
        
        { "include": "#default-scopes" }
      ]
    },
    "inline-generation": {
      "begin": "\\s+(gen)\\s+(?:(?:(?:list(?:\\s*key\\s*:\\s*[a-zA-Z](?:[a-zA-Z0-9_]+)?)?\\s+of\\s+))*(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?))",
      "beginCaptures": {
        "1": {"name": "keyword.other.gen.specman"},
        "2": {"name": "variable.other.specman"}
      },
      "pattern": [{"include": "#inline-generation-constraint"}],
      "end": "(;)",
      "endCaptures": {
        "1": {"name": "punctuation.terminator.specman"}
      }
    },
    "inline-generation-constraint": {
      "name": "meta.constraint.specman",
      "begin": "(\\bkeeping\\b)(\\s*\\{)",
      "beginCaptures": {
        "1": {"name": "keyword.other.constraint.specman"},
        "2": {"name": "punctuation.section.constraint_block.begin.specman"}
      },
      "contentName": "meta.inline-generation.specman",
      "end": "(\\})\\s*(;)",
      "endCaptures": {
        "1": {"name":  "punctuation.section.constraint_block.end.specman"},
        "2": {"name":  "punctuation.terminator.specman"}
      },
      "pattern": [{ "include": "#code"}]
    },
    "struct-allocation": {
      "match": "\\bnew\\b",
      "name": "meta.function-call.new.specman keyword.other.new.specman"
    },
    "variable-declaration": {
      "patterns": [
        {
          "match": "\\b(var|item)\\b\\s*(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s*)(:)\\s*(?:(?:list(?:\\s*key\\s*:\\s*[a-zA-Z](?:[a-zA-Z0-9_]+)?)?\\s+of\\s+))*(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s*)(?:\\[\\s*\\S+\\s*\\.\\.\\s*\\S+\\s*\\])?\\s*(?:)?",
          "captures": {
            "1": {"name": "keyword.declaration.specman"},
            "2": {"name": "variable.other.specman"},
            "3": {"name": "punctuation.separator.type.specman"},
            "4": {"name": "storage.type.specman"}
          }
        },
        {
          "match": "(\\bvar\\b)\\s*(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s*)(:)\\s*(\\[\\s*)",
          "captures": {
            "1": {"name": "keyword.declaration.specman"},
            "2": {"name": "variable.other.specman"},
            "3": {"name": "punctuation.separator.type.specman"},
            "4": {"name": "punctuation.brackets.begin.specman"}
          },
          "patterns": {"include": "#enum-values-declaration"}
        },
        {
          "match": "(\\bvar\\b)\\s*(?:[a-zA-Z](?:[a-zA-Z0-9_]+)?\\s*)(:=\\s*)",
          "captures": {
            "1": {"name": "keyword.declaration.specman"},
            "2": {"name": "variable.other.specman"},
            "3": {"name": "keyword.operator.assignment.specman"}
          }
        }
      ]
    },
    "preprocessor": {
      "patterns": [
        {
          "begin": "\\s*(?:\\}\\s*)?(#\\s*(?:ifdef|ifndef|else))\\s*((?:`)?[a-zA-Z](?:[a-zA-Z0-9_]+)?)?(\\s+then\\b)?\\s*(\\{)",
          "beginCaptures": {
            "1": {"name": "keyword.control.import.specman"},
            "2": {"name": "variable.other.define.specman"},
            "4": {"name": "keyword.control.import.specman"},
            "5": {"name": "punctuation.section.block.begin.specman"}
          },
          
          "end": "\\}",
          "endCaptures": "punctuation.section.block.end.specman",
          "patterns": [
            { "include": "#imports" },
            { "include": "#structs" },
            { "include": "#code" }
          ]
        },
        {
          "match": "(\\bmethod_type\\b)\\s+\\b[a-zA-Z](?:[a-zA-Z0-9_]+)?\\b\\s*(?=\\()",
          "captures": {
            "1": {"name": "meta.function.method_type.specman keyword.declaration.specman"},
            "2": {"name": "meta.function.method_type.specman entity.name.function.specman"}
          }
        },
        {
          "match": "(#\\s*(?:undef))\\s*((?:`)?[a-zA-Z](?:[a-zA-Z0-9_]+)?)",
          "captures": {
            "1": {"name": "keyword.control.import.specman"},
            "2": {"name": "variable.other.define.specman"}
          }
        }
      ]
    },
    "string": {
      "begin": "(\")",
      "beginCaptures": {
        "1": {"name": "punctuation.definition.string.begin.specman"}
      },
      "name": "string.quoted.double.specman",
      "patterns": [
        {
          "match": "\\\\n|\\\\t|\\\\f|\\\\\"|\\\\\\\\|\\\\r",
          "name": "constant.character.escape.specman"
        }
      ],
      "end": "(\")",
      "endCaptures": {
        "1": {"name": "punctuation.definition.string.end.specman"}
      }
    }
  }
}
